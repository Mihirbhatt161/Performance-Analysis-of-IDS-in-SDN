# File: intrusion_detection.py
from ryu.base import app_manager
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER, CONFIG_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.lib.packet import packet, ethernet, ipv4, tcp
from ryu.ofproto import ofproto_v1_3

class IntrusionDetection(app_manager.RyuApp):
    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]
    
    def __init__(self, *args, **kwargs):
        super(IntrusionDetection, self).__init__(*args, **kwargs)
        self.blocked_ips = []

    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)
    def switch_features_handler(self, ev):
        self.logger.info("Switch connected")
        datapath = ev.msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        # Install default table-miss flow entry
        match = parser.OFPMatch()
        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER, ofproto.OFPCML_NO_BUFFER)]
        self.add_flow(datapath, 0, match, actions)

    def add_flow(self, datapath, priority, match, actions):
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser
        
        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS, actions)]
        mod = parser.OFPFlowMod(datapath=datapath, priority=priority, match=match, instructions=inst)
        datapath.send_msg(mod)

    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)
    def packet_in_handler(self, ev):
        msg = ev.msg
        datapath = msg.datapath
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        pkt = packet.Packet(msg.data)
        eth = pkt.get_protocol(ethernet.ethernet)
        
        if eth.ethertype == 0x0800:  # IPv4
            ip = pkt.get_protocol(ipv4.ipv4)
            if ip.src in self.blocked_ips:
                self.logger.info(f"Blocked packet from {ip.src}")
                return
            
            if ip.src == "10.0.0.3":  # Example: Detect a suspicious IP
                self.logger.warning(f"Suspicious activity from {ip.src}")
                self.blocked_ips.append(ip.src)
                
                # Drop future packets from this IP
                match = parser.OFPMatch(eth_type=0x0800, ipv4_src=ip.src)
                self.add_flow(datapath, 1, match, [])
                return
            
            self.logger.info(f"Packet from {ip.src} to {ip.dst}")
